{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { firstValueFrom } from 'rxjs';\nimport { getHeaders } from 'src/common/utils/functions';\nimport { branchesEndpoint } from 'src/constants/api-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport let BranchesService = /*#__PURE__*/(() => {\n  class BranchesService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n    }\n\n    getAll(take, skip, filters) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let query = '';\n\n        for (var key in filters) {\n          if (filters.hasOwnProperty(key) && filters[key]) {\n            var val = filters[key];\n            query += '&' + key + '=' + val;\n          }\n        }\n\n        return yield firstValueFrom(this.http.get(branchesEndpoint + `?take=${take}&skip=${skip}${query}`, {\n          headers: getHeaders()\n        })).then(value => {\n          console.log(`Result: ` + value);\n          return value;\n        });\n      });\n    }\n\n  }\n\n  BranchesService.ɵfac = function BranchesService_Factory(t) {\n    return new (t || BranchesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n\n  BranchesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BranchesService,\n    factory: BranchesService.ɵfac,\n    providedIn: 'root'\n  });\n  return BranchesService;\n})();","map":null,"metadata":{},"sourceType":"module"}