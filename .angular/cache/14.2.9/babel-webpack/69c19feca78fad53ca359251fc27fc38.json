{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { DialogLayoutDisplay } from '@costlydeveloper/ngx-awesome-popup';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { EmployeeRole } from 'src/common/enums/employee-role.enum';\nimport { getHeaders } from 'src/common/utils/functions';\nimport { apiUrl, employeesLoginEndpoint } from 'src/constants/api-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./alert.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, // public jwtHelper: JwtHelperService,\n    alertService, router, location, route) {\n      var _a;\n\n      this.http = http;\n      this.alertService = alertService;\n      this.router = router;\n      this.location = location;\n      this.route = route;\n      const s = localStorage.getItem('currentEmployee');\n\n      if (s != null) {\n        this.currentEmployeeSubject = new BehaviorSubject(JSON.parse(s));\n      } else {\n        this.currentEmployeeSubject = new BehaviorSubject(null);\n      }\n\n      this.currentEmployeeObservable = (_a = this.currentEmployeeSubject) === null || _a === void 0 ? void 0 : _a.asObservable();\n    }\n\n    get currentEmployee() {\n      var _a;\n\n      return (_a = this.currentEmployeeSubject) === null || _a === void 0 ? void 0 : _a.value;\n    }\n\n    employeeLogin(data) {\n      return this.http.post(employeesLoginEndpoint, data).pipe(map(Employee => {\n        localStorage.setItem('currentEmployee', JSON.stringify(Employee.Employee));\n        localStorage.setItem('access_token', Employee.access_token);\n        this.currentEmployeeSubject.next(Employee);\n        return Employee;\n      }));\n    }\n\n    logout() {\n      localStorage.removeItem('currentEmployee');\n      localStorage.removeItem('access_token');\n      return true;\n    } // register(data: {\n    //   lastName: string;\n    //   firstName: string;\n    //   password: string;\n    //   confirmPassword: string;\n    //   role: number;\n    //   email: string;\n    // }) {\n    //   return this.http.post(`${apiUrl}/auth/register`, data, {\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       'X-Requested-With': 'XMLHttpRequest',\n    //     },\n    //   });\n    // }\n    // resetPasswordRequest(email: any) {\n    //   const data: any = {};\n    //   data.email = email;\n    //   return this.http.post(`${apiUrl}/forgot`, data);\n    // }\n    // resetPassword(data: any, token: any) {\n    //   const d: any = {};\n    //   d.data = data;\n    //   d.token = token;\n    //   return this.http.post(`${apiUrl}/resetpassword`, d);\n    // }\n\n\n    isAuthenticated() {\n      const exists = !!this.currentEmployee;\n      const token = localStorage.getItem('access_token');\n      if (!token || !exists) return false; // Check whether the token is expired and return\n      // true or false\n      // return !this.jwtHelper.isTokenExpired(token);\n    }\n\n    isTokenExpired(token) {\n      const expiry = JSON.parse(atob(token.split('.')[1])).exp;\n      return Math.floor(new Date().getTime() / 1000) >= expiry;\n    }\n\n    handleHttpError(err) {\n      var _a;\n\n      switch (err.error.statusCode) {\n        case 400:\n          Array.isArray(err.error.message) ? err.error.message.forEach(message => {\n            this.alertService.toastNotification(message, DialogLayoutDisplay.DANGER);\n          }) : this.alertService.toastNotification(err.error.message, DialogLayoutDisplay.DANGER);\n          break;\n\n        case 404:\n          let canGoBack = !!((_a = this.router.getCurrentNavigation()) === null || _a === void 0 ? void 0 : _a.previousNavigation);\n\n          if (canGoBack) {\n            // We can safely go back to the previous location as\n            // we know it's within our app.\n            this.alertService.toastNotification('Error 404 - not found', DialogLayoutDisplay.DANGER);\n            this.location.back();\n          } else {\n            // There's no previous navigation.\n            // Here we decide where to go. For example, let's say the\n            // upper level is the index page, so we go up one level.\n            this.alertService.toastNotification('Error 404 - not found', DialogLayoutDisplay.DANGER);\n            this.router.navigate(['..'], {\n              relativeTo: this.route\n            });\n          }\n\n          break;\n\n        case 403 || 401:\n          //not authorized\n          this.logout();\n          this.router.navigate(['/']).then(() => {\n            window.location.reload();\n          });\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    updatePassword(id, data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield this.http.patch(`${apiUrl}auth/${id}/update-password`, data, {\n          headers: getHeaders()\n        }).toPromise();\n      });\n    }\n\n    isAdmin() {\n      return this.isAuthenticated() && this.currentEmployee.role == EmployeeRole.ADMIN;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlertService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.Location), i0.ɵɵinject(i3.ActivatedRoute));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}