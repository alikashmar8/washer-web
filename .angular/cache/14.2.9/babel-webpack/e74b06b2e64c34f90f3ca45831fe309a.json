{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"./alert.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, jwtHelper, alertService, router, location, route) {\n      this.http = http;\n      this.jwtHelper = jwtHelper;\n      this.alertService = alertService;\n      this.router = router;\n      this.location = location;\n      this.route = route;\n      const s = localStorage.getItem('currentEmployee');\n\n      if (s != null) {\n        this.currentEmployeeSubject = new BehaviorSubject(JSON.parse(s));\n      } else {\n        this.currentEmployeeSubject = new BehaviorSubject(null);\n      } //   this.currentEmployeeObservable =\n      //     this.currentEmployeeSubject?.asObservable();\n      // }\n      // public get currentEmployee(): Employee | null {\n      //   return this.currentEmployeeSubject?.value;\n      // }\n      // employeeLogin(data: {\n      //   email?: string;\n      //   username?: string;\n      //   phoneNumber?: string;\n      //   password: string;\n      // }) {\n      //   return this.http.post<any>(employeesLoginEndpoint, data).pipe(\n      //     map((Employee) => {\n      //       localStorage.setItem(\n      //         'currentEmployee',\n      //         JSON.stringify(Employee.Employee)\n      //       );\n      //       localStorage.setItem('access_token', Employee.access_token);\n      //       this.currentEmployeeSubject.next(Employee);\n      //       return Employee;\n      //     })\n      //   );\n      // }\n      // logout() {\n      //   localStorage.removeItem('currentEmployee');\n      //   localStorage.removeItem('access_token');\n      //   return true;\n      // }\n      // // register(data: {\n      // //   lastName: string;\n      // //   firstName: string;\n      // //   password: string;\n      // //   confirmPassword: string;\n      // //   role: number;\n      // //   email: string;\n      // // }) {\n      // //   return this.http.post(`${apiUrl}/auth/register`, data, {\n      // //     headers: {\n      // //       'Content-Type': 'application/json',\n      // //       'X-Requested-With': 'XMLHttpRequest',\n      // //     },\n      // //   });\n      // // }\n      // // resetPasswordRequest(email: any) {\n      // //   const data: any = {};\n      // //   data.email = email;\n      // //   return this.http.post(`${apiUrl}/forgot`, data);\n      // // }\n      // // resetPassword(data: any, token: any) {\n      // //   const d: any = {};\n      // //   d.data = data;\n      // //   d.token = token;\n      // //   return this.http.post(`${apiUrl}/resetpassword`, d);\n      // // }\n      // public isAuthenticated(): boolean {\n      //   const exists: boolean = !!this.currentEmployee;\n      //   const token = localStorage.getItem('access_token');\n      //   if (!token || !exists) return false;\n      //   // Check whether the token is expired and return\n      //   // true or false\n      //   return !this.jwtHelper.isTokenExpired(token);\n      // }\n      // isTokenExpired(token: string) {\n      //   const expiry = JSON.parse(atob(token.split('.')[1])).exp;\n      //   return Math.floor(new Date().getTime() / 1000) >= expiry;\n      // }\n      // handleHttpError(err: HttpErrorResponse) {\n      //   switch (err.error.statusCode) {\n      //     case 400:\n      //       Array.isArray(err.error.message)\n      //         ? err.error.message.forEach((message) => {\n      //             this.alertService.toastNotification(\n      //               message,\n      //               DialogLayoutDisplay.DANGER\n      //             );\n      //           })\n      //         : this.alertService.toastNotification(\n      //             err.error.message,\n      //             DialogLayoutDisplay.DANGER\n      //           );\n      //       break;\n      //     case 404:\n      //       let canGoBack =\n      //         !!this.router.getCurrentNavigation()?.previousNavigation;\n      //       if (canGoBack) {\n      //         // We can safely go back to the previous location as\n      //         // we know it's within our app.\n      //         this.alertService.toastNotification(\n      //           'Error 404 - not found',\n      //           DialogLayoutDisplay.DANGER\n      //         );\n      //         this.location.back();\n      //       } else {\n      //         // There's no previous navigation.\n      //         // Here we decide where to go. For example, let's say the\n      //         // upper level is the index page, so we go up one level.\n      //         this.alertService.toastNotification(\n      //           'Error 404 - not found',\n      //           DialogLayoutDisplay.DANGER\n      //         );\n      //         this.router.navigate(['..'], { relativeTo: this.route });\n      //       }\n      //       break;\n      //     case 403 || 401:\n      //       //not authorized\n      //       this.logout();\n      //       this.router.navigate(['/']).then(() => {\n      //         window.location.reload();\n      //       });\n      //       break;\n      //     default:\n      //       break;\n      //   }\n      // }\n      // async updatePassword(\n      //   id,\n      //   data: { oldPassword: string; newPassword: string; confirmPassword: string }\n      // ) {\n      //   return await this.http\n      //     .patch<any>(`${apiUrl}auth/${id}/update-password`, data, {\n      //       headers: getHeaders(),\n      //     })\n      //     .toPromise();\n      // }\n      // isAdmin(): boolean {\n      //   return (\n      //     this.isAuthenticated() && this.currentEmployee.role == EmployeeRole.ADMIN\n      //   );\n      // }\n\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.AlertService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.Location), i0.ɵɵinject(i4.ActivatedRoute));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}